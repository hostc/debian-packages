Description: Add appindicator support.
Author: Travis B. Hartwell <nafai@travishartwell.net>
Bug: https://bugzilla.gnome.org/show_bug.cgi?id=606420
Bug-Ubuntu: https://launchpad.net/bugs/497853

Index: b/configure.ac
===================================================================
--- a/configure.ac
+++ b/configure.ac
@@ -375,6 +375,23 @@
 fi
 AM_CONDITIONAL(BUILD_GROWISOFS, test x"$build_growisofs" = "xyes")
 
+dnl ****************check for appindicators (optional) **************
+APPINDICATOR_REQUIRED=0.0.7
+
+AC_ARG_ENABLE(appindicator,
+			AS_HELP_STRING([--enable-appindicator],[Build support for application indicators [[default=yes]]]),
+			[enable_appindicator=$enableval],
+			[enable_appindicator="yes"])
+
+if test x$enable_appindicator = xyes ; then
+	PKG_CHECK_MODULES(APP_INDICATOR,
+			appindicator3-0.1 >= $APPINDICATOR_REQUIRED)
+	AC_SUBST(APP_INDICATOR_CFLAGS)
+	AC_SUBST(APP_INDICATOR_LIBS)
+	AC_DEFINE(HAVE_APP_INDICATOR, 1, [Have AppIndicator])
+fi
+AM_CONDITIONAL(HAVE_APP_INDICATOR, test x"$enable_appindicator" = xyes)
+
 TRACKER_REQUIRED=0.10.0
 
 AC_ARG_ENABLE(search,
@@ -633,6 +650,7 @@
 	Build growisofs plugins : ${build_growisofs}
 	Build libburnia plugins : ${build_libburnia}
 	Build GObject-Introspection : ${found_introspection}
+	Build Application Indicators : ${enable_appindicator}
 "
 echo
 echo
Index: b/libburner-burn/Makefile.am
===================================================================
--- a/libburner-burn/Makefile.am
+++ b/libburner-burn/Makefile.am
@@ -198,6 +198,12 @@
 libburner_burn3_la_SOURCES += burner-file-monitor.c burner-file-monitor.h
 endif
 
+if HAVE_APP_INDICATOR
+libburner_burn3_la_SOURCES += burner-app-indicator.h burner-app-indicator.c
+libburner_burn3_la_LIBADD += @APP_INDICATOR_LIBS@
+AM_CPPFLAGS += -DHAVE_APP_INDICATOR @APP_INDICATOR_CFLAGS@
+endif
+
 EXTRA_DIST =			\
 	libburner-marshal.list
 #	libburner-burn.symbols
Index: b/libburner-burn/burner-app-indicator.c
===================================================================
--- /dev/null
+++ b/libburner-burn/burner-app-indicator.c
@@ -0,0 +1,367 @@
+/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 8; tab-width: 8 -*- */
+/*
+ * Libburner-burn
+ * Copyright (C) Canonical 2010
+ *
+ * Libburner-burn is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * The Libburner-burn authors hereby grant permission for non-GPL compatible
+ * GStreamer plugins to be used and distributed together with GStreamer
+ * and Libburner-burn. This permission is above and beyond the permissions granted
+ * by the GPL license by which Libburner-burn is covered. If you modify this code
+ * you may extend this exception to your version of the code, but you are not
+ * obligated to do so. If you do not wish to do so, delete this exception
+ * statement from your version.
+ *
+ * Libburner-burn is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to:
+ * 	The Free Software Foundation, Inc.,
+ * 	51 Franklin Street, Fifth Floor
+ * 	Boston, MA  02110-1301, USA.
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+
+#include <glib.h>
+#include <glib/gi18n.h>
+
+#include <gtk/gtk.h>
+
+#include <libappindicator/app-indicator.h>
+
+#include "burn-basics.h"
+#include "burner-app-indicator.h"
+
+static void burner_app_indicator_class_init (BurnerAppIndicatorClass *klass);
+static void burner_app_indicator_init (BurnerAppIndicator *sp);
+static void burner_app_indicator_finalize (GObject *object);
+
+static void
+burner_app_indicator_cancel_cb (GtkAction *action, BurnerAppIndicator *indicator);
+
+static void
+burner_app_indicator_show_cb (GtkAction *action, BurnerAppIndicator *indicator);
+
+struct BurnerAppIndicatorPrivate {
+	AppIndicator *indicator;
+	BurnerBurnAction action;
+	gchar *action_string;
+
+	GtkUIManager *manager;
+
+	int rounded_percent;
+	int percent;
+};
+
+typedef enum {
+	CANCEL_SIGNAL,
+	CLOSE_AFTER_SIGNAL,
+	SHOW_DIALOG_SIGNAL,
+	LAST_SIGNAL
+} BurnerAppIndicatorSignalType;
+
+static guint burner_app_indicator_signals[LAST_SIGNAL] = { 0 };
+static GObjectClass *parent_class = NULL;
+
+static GtkActionEntry entries[] = {
+	{"ContextualMenu", NULL, N_("Menu")},
+	{"Progress", NULL, "Progress"},
+	{"Cancel", GTK_STOCK_CANCEL, NULL, NULL, N_("Cancel ongoing burning"),
+	 G_CALLBACK (burner_app_indicator_cancel_cb)},
+};
+
+static GtkToggleActionEntry toggle_entries[] = {
+	{"Show", NULL, N_("Show _Dialog"), NULL, N_("Show dialog"),
+	 G_CALLBACK (burner_app_indicator_show_cb), TRUE,},
+};
+
+static const char *description = {
+	"<ui>"
+	"<popup action='ContextMenu'>"
+		"<menuitem action='Progress'/>"
+		"<separator/>"
+		"<menuitem action='Show'/>"
+		"<separator/>"
+		"<menuitem action='Cancel'/>"
+	"</popup>"
+	"</ui>"
+};
+
+static const gchar *accessible_desc = NULL;
+
+G_DEFINE_TYPE (BurnerAppIndicator, burner_app_indicator, G_TYPE_OBJECT);
+
+static void
+burner_app_indicator_class_init (BurnerAppIndicatorClass *klass)
+{
+	GObjectClass *object_class = G_OBJECT_CLASS(klass);
+
+	parent_class = g_type_class_peek_parent(klass);
+	object_class->finalize = burner_app_indicator_finalize;
+
+	burner_app_indicator_signals[SHOW_DIALOG_SIGNAL] =
+	    g_signal_new ("show_dialog",
+			  G_OBJECT_CLASS_TYPE (object_class),
+			  G_SIGNAL_RUN_FIRST | G_SIGNAL_ACTION,
+			  G_STRUCT_OFFSET (BurnerAppIndicatorClass,
+					   show_dialog), NULL, NULL,
+			  g_cclosure_marshal_VOID__BOOLEAN,
+			  G_TYPE_NONE,
+			  1,
+			  G_TYPE_BOOLEAN);
+	burner_app_indicator_signals[CANCEL_SIGNAL] =
+	    g_signal_new ("cancel",
+			  G_OBJECT_CLASS_TYPE (object_class),
+			  G_SIGNAL_RUN_FIRST | G_SIGNAL_ACTION,
+			  G_STRUCT_OFFSET (BurnerAppIndicatorClass,
+					   cancel), NULL, NULL,
+			  g_cclosure_marshal_VOID__VOID,
+			  G_TYPE_NONE,
+			  0);
+	burner_app_indicator_signals[CLOSE_AFTER_SIGNAL] =
+	    g_signal_new ("close_after",
+			  G_OBJECT_CLASS_TYPE (object_class),
+			  G_SIGNAL_RUN_FIRST | G_SIGNAL_ACTION,
+			  G_STRUCT_OFFSET (BurnerAppIndicatorClass,
+					   close_after), NULL, NULL,
+			  g_cclosure_marshal_VOID__BOOLEAN,
+			  G_TYPE_NONE,
+			  1,
+			  G_TYPE_BOOLEAN);
+}
+
+static GtkWidget *
+burner_app_indicator_build_menu (BurnerAppIndicator *indicator)
+{
+	GtkActionGroup *action_group;
+	GtkWidget *menu = NULL,
+		*menu_item = NULL;
+	GError *error = NULL;
+
+	action_group = gtk_action_group_new ("MenuAction");
+	gtk_action_group_set_translation_domain (action_group, GETTEXT_PACKAGE);
+	gtk_action_group_add_actions (action_group,
+				      entries,
+				      G_N_ELEMENTS (entries),
+				      indicator);
+	gtk_action_group_add_toggle_actions (action_group,
+					     toggle_entries,
+					     G_N_ELEMENTS (toggle_entries),
+					     indicator);
+
+	indicator->priv->manager = gtk_ui_manager_new ();
+	gtk_ui_manager_insert_action_group (indicator->priv->manager,
+					    action_group,
+					    0);
+
+	if (!gtk_ui_manager_add_ui_from_string (indicator->priv->manager,
+						description,
+						-1,
+						&error)) {
+		g_message ("building menus failed: %s", error->message);
+		g_error_free (error);
+	} else {
+		menu = gtk_ui_manager_get_widget (indicator->priv->manager, "/ContextMenu");
+		menu_item = gtk_ui_manager_get_widget (indicator->priv->manager, "/ContextMenu/Progress");
+		gtk_widget_set_sensitive (menu_item, FALSE);
+
+		menu_item = gtk_ui_manager_get_widget (indicator->priv->manager, "/ContextMenu/Cancel");
+		gtk_image_menu_item_set_image (GTK_IMAGE_MENU_ITEM (menu_item), GTK_WIDGET (gtk_image_new ()));
+	}
+
+	return menu;
+}
+
+void
+burner_app_indicator_hide (BurnerAppIndicator *indicator)
+{
+	app_indicator_set_status (indicator->priv->indicator, APP_INDICATOR_STATUS_PASSIVE);
+}
+
+static void
+burner_app_indicator_init (BurnerAppIndicator *obj)
+{
+	GtkWidget *indicator_menu;
+
+	obj->priv = g_new0 (BurnerAppIndicatorPrivate, 1);
+	indicator_menu =  burner_app_indicator_build_menu (obj);
+
+	if (indicator_menu != NULL) {
+		obj->priv->indicator = app_indicator_new_with_path ("burner",
+								    "burner-disc-00",
+								    APP_INDICATOR_CATEGORY_APPLICATION_STATUS,
+								    BURNER_DATADIR "/icons");
+
+		app_indicator_set_status (obj->priv->indicator,
+					  APP_INDICATOR_STATUS_ACTIVE);
+
+		app_indicator_set_menu (obj->priv->indicator, GTK_MENU (indicator_menu));
+	}
+}
+
+static void
+burner_app_indicator_finalize (GObject *object)
+{
+	BurnerAppIndicator *cobj;
+
+	cobj = BURNER_APPINDICATOR (object);
+
+	if (cobj->priv->action_string) {
+		g_free (cobj->priv->action_string);
+		cobj->priv->action_string = NULL;
+	}
+
+	g_object_unref (cobj->priv->indicator);
+	g_free (cobj->priv);
+	G_OBJECT_CLASS (parent_class)->finalize (object);
+}
+
+BurnerAppIndicator *
+burner_app_indicator_new ()
+{
+	BurnerAppIndicator *obj;
+
+	obj = BURNER_APPINDICATOR (g_object_new (BURNER_TYPE_APPINDICATOR, NULL));
+
+	return obj;
+}
+
+static void
+burner_app_indicator_set_progress_menu_text (BurnerAppIndicator *indicator,
+					      glong remaining)
+{
+	gchar *text;
+	GtkWidget *progress;
+	const gchar *action_string;
+
+	if (!indicator->priv->action_string)
+		action_string = burner_burn_action_to_string (indicator->priv->action);
+	else
+		action_string = indicator->priv->action_string;
+
+	if (remaining > 0) {
+		gchar *remaining_string;
+
+		remaining_string = burner_units_get_time_string ((double) remaining * 1000000000, TRUE, FALSE);
+		text = g_strdup_printf (_("%s, %d%% done, %s remaining"),
+					action_string,
+					indicator->priv->percent,
+					remaining_string);
+		g_free (remaining_string);
+	}
+	else if (indicator->priv->percent > 0)
+		text = g_strdup_printf (_("%s, %d%% done"),
+					action_string,
+					indicator->priv->percent);
+	else
+		text = g_strdup (action_string);
+
+	/* Set the text on the menu */
+	progress = gtk_ui_manager_get_widget (indicator->priv->manager,
+					      "/ContextMenu/Progress");
+	gtk_menu_item_set_label (GTK_MENU_ITEM (progress), text);
+	accessible_desc = g_strdup_printf(_("Burner Disc Burner: %s"), text);
+	g_free (text);
+}
+
+void
+burner_app_indicator_set_action (BurnerAppIndicator *indicator,
+				  BurnerBurnAction action,
+				  const gchar *string)
+{
+	indicator->priv->action = action;
+	if (indicator->priv->action_string)
+		g_free (indicator->priv->action_string);
+
+	if (string)
+		indicator->priv->action_string = g_strdup (string);
+	else
+		indicator->priv->action_string = NULL;
+
+	burner_app_indicator_set_progress_menu_text (indicator, -1);
+}
+
+void
+burner_app_indicator_set_progress (BurnerAppIndicator *indicator,
+				    gdouble fraction,
+				    glong remaining)
+{
+	gint percent;
+	gint remains;
+	gchar *icon_name;
+
+	percent = fraction * 100;
+	indicator->priv->percent = percent;
+
+	/* set the tooltip */
+	burner_app_indicator_set_progress_menu_text (indicator, remaining);
+
+	/* change image if need be */
+	remains = percent % 5;
+	if (remains > 3)
+		percent += 5 - remains;
+	else
+		percent -= remains;
+
+	if (indicator->priv->rounded_percent == percent
+	||  percent < 0 || percent > 100)
+		return;
+
+	indicator->priv->rounded_percent = percent;
+
+	icon_name = g_strdup_printf ("burner-disc-%02i", percent);
+	app_indicator_set_icon_full(indicator->priv->indicator,
+			       icon_name, accessible_desc);
+	g_free (icon_name);
+}
+
+static void
+burner_app_indicator_change_show_dialog_state (BurnerAppIndicator *indicator)
+{
+	GtkAction *action;
+	gboolean active;
+
+	/* update menu */
+	action = gtk_ui_manager_get_action (indicator->priv->manager, "/ContextMenu/Show");
+	active = gtk_toggle_action_get_active (GTK_TOGGLE_ACTION (action));
+
+	/* signal show dialog was requested the dialog again */
+	g_signal_emit (indicator,
+		       burner_app_indicator_signals [SHOW_DIALOG_SIGNAL],
+		       0,
+		       active);
+}
+
+static void
+burner_app_indicator_cancel_cb (GtkAction *action, BurnerAppIndicator *indicator)
+{
+	g_signal_emit (indicator,
+		       burner_app_indicator_signals [CANCEL_SIGNAL],
+		       0);
+}
+
+static void
+burner_app_indicator_show_cb (GtkAction *action, BurnerAppIndicator *indicator)
+{
+	burner_app_indicator_change_show_dialog_state (indicator);
+}
+
+void
+burner_app_indicator_set_show_dialog (BurnerAppIndicator *indicator, gboolean show)
+{
+	GtkAction *action;
+
+	/* update menu */
+	action = gtk_ui_manager_get_action (indicator->priv->manager, "/ContextMenu/Show");
+	gtk_toggle_action_set_active (GTK_TOGGLE_ACTION (action), show);
+}
Index: b/libburner-burn/burner-app-indicator.h
===================================================================
--- /dev/null
+++ b/libburner-burn/burner-app-indicator.h
@@ -0,0 +1,88 @@
+/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 8; tab-width: 8 -*- */
+/*
+ * Libburner-burn
+ * Copyright (C) Canonical 2010
+ *
+ * Libburner-burn is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * The Libburner-burn authors hereby grant permission for non-GPL compatible
+ * GStreamer plugins to be used and distributed together with GStreamer
+ * and Libburner-burn. This permission is above and beyond the permissions granted
+ * by the GPL license by which Libburner-burn is covered. If you modify this code
+ * you may extend this exception to your version of the code, but you are not
+ * obligated to do so. If you do not wish to do so, delete this exception
+ * statement from your version.
+ *
+ * Libburner-burn is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to:
+ * 	The Free Software Foundation, Inc.,
+ * 	51 Franklin Street, Fifth Floor
+ * 	Boston, MA  02110-1301, USA.
+ */
+
+#ifndef APP_INDICATOR_H
+#define APP_INDICATOR_H
+
+#include <glib.h>
+#include <glib-object.h>
+
+#include <gtk/gtk.h>
+
+#include "burn-basics.h"
+
+G_BEGIN_DECLS
+
+#define BURNER_TYPE_APPINDICATOR         (burner_app_indicator_get_type ())
+#define BURNER_APPINDICATOR(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), BURNER_TYPE_APPINDICATOR, BurnerAppIndicator))
+#define BURNER_APPINDICATOR_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), BURNER_TYPE_APPINDICATOR, BurnerAppIndicatorClass))
+#define BURNER_IS_APPINDICATOR(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), BURNER_TYPE_APPINDICATOR))
+#define BURNER_IS_APPINDICATOR_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), BURNER_TYPE_APPINDICATOR))
+#define BURNER_APPINDICATOR_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BURNER_TYPE_APPINDICATOR, BurnerAppIndicatorClass))
+
+typedef struct BurnerAppIndicatorPrivate BurnerAppIndicatorPrivate;
+
+typedef struct {
+	GObject parent;
+	BurnerAppIndicatorPrivate *priv;
+} BurnerAppIndicator;
+
+typedef struct {
+	GObjectClass parent_class;
+
+	void		(*show_dialog)		(BurnerAppIndicator *indicator, gboolean show);
+	void		(*close_after)		(BurnerAppIndicator *indicator, gboolean close);
+	void		(*cancel)		(BurnerAppIndicator *indicator);
+
+} BurnerAppIndicatorClass;
+
+GType burner_app_indicator_get_type (void);
+BurnerAppIndicator *burner_app_indicator_new (void);
+
+void
+burner_app_indicator_set_progress (BurnerAppIndicator *indicator,
+				    gdouble fraction,
+				    long remaining);
+
+void
+burner_app_indicator_set_action (BurnerAppIndicator *indicator,
+				  BurnerBurnAction action,
+				  const gchar *string);
+
+void
+burner_app_indicator_set_show_dialog (BurnerAppIndicator *indicator,
+				       gboolean show);
+
+void
+burner_app_indicator_hide (BurnerAppIndicator *indicator);
+
+G_END_DECLS
+
+#endif /* APP_INDICATOR_H */
Index: b/libburner-burn/burner-burn-dialog.c
===================================================================
--- a/libburner-burn/burner-burn-dialog.c
+++ b/libburner-burn/burner-burn-dialog.c
@@ -2,6 +2,7 @@
 /*
  * Libburner-burn
  * Copyright (C) Philippe Rouquier 2005-2009 <bonfire-app@wanadoo.fr>
+ * Copyright (C) Canonical 2010
  *
  * Libburner-burn is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -50,6 +51,9 @@
 
 #include "burner-burn-dialog.h"
 
+#ifdef HAVE_APP_INDICATOR
+#include "burner-app-indicator.h"
+#endif
 #include "burner-session-cfg.h"
 #include "burner-session-helper.h"
 
@@ -71,6 +75,16 @@
 
 G_DEFINE_TYPE (BurnerBurnDialog, burner_burn_dialog, GTK_TYPE_DIALOG);
 
+#ifdef HAVE_APP_INDICATOR
+static void
+burner_burn_dialog_indicator_cancel_cb (BurnerAppIndicator *indicator,
+					 BurnerBurnDialog *dialog);
+
+static void
+burner_burn_dialog_indicator_show_dialog_cb (BurnerAppIndicator *indicator,
+					      gboolean show,
+					      GtkWidget *dialog);
+#endif
 static void
 burner_burn_dialog_cancel_clicked_cb (GtkWidget *button,
 				       BurnerBurnDialog *dialog);
@@ -89,6 +103,10 @@
 	GtkWidget *cancel;
 	GtkWidget *image;
 
+#ifdef HAVE_APP_INDICATOR
+	BurnerAppIndicator *indicator;
+#endif
+
 	/* for our final statistics */
 	GTimer *total_time;
 	gint64 total_size;
@@ -1271,6 +1289,12 @@
 			     &written,
 			     &rate);
 
+#ifdef HAVE_APP_INDICATOR
+	burner_app_indicator_set_progress (BURNER_APPINDICATOR (priv->indicator),
+					    task_progress,
+					    remaining);
+#endif
+
 	burner_burn_dialog_progress_changed_real (dialog,
 						   written,
 						   isosize,
@@ -1295,6 +1319,12 @@
 	burner_burn_progress_set_action (BURNER_BURN_PROGRESS (priv->progress),
 					  action,
 					  string);
+
+#ifdef HAVE_APP_INDICATOR
+	burner_app_indicator_set_action (BURNER_APPINDICATOR (priv->indicator),
+					  action,
+					  string);
+#endif
 }
 
 static void
@@ -1456,6 +1486,12 @@
 					  -1,
 					  -1,
 					  -1);
+
+#ifdef HAVE_APP_INDICATOR
+	burner_app_indicator_set_progress (BURNER_APPINDICATOR (priv->indicator),
+					    0.0,
+					    -1);
+#endif
 }
 
 static void
@@ -1489,6 +1525,11 @@
 					  -1,
 					  -1,
 					  -1);
+
+#ifdef HAVE_APP_INDICATOR
+	burner_app_indicator_hide (priv->indicator);
+#endif
+
 	/* Restore title */
 	if (priv->initial_title)
 		gtk_window_set_title (GTK_WINDOW (dialog), priv->initial_title);
@@ -1640,6 +1681,12 @@
 					  BURNER_BURN_ACTION_NONE,
 					  NULL);
 
+#ifdef HAVE_APP_INDICATOR
+	burner_app_indicator_set_action (BURNER_APPINDICATOR (priv->indicator),
+					  BURNER_BURN_ACTION_NONE,
+					  NULL);
+#endif
+
 	g_timer_continue (priv->total_time);
 
 	return BURNER_BURN_OK;
@@ -1657,6 +1704,11 @@
 
 	priv = BURNER_BURN_DIALOG_PRIVATE (dialog);
 
+#ifdef HAVE_APP_INDICATOR
+	burner_app_indicator_set_show_dialog (BURNER_APPINDICATOR (priv->indicator),
+					       FALSE);
+#endif
+
 	chooser = gtk_file_chooser_dialog_new (_("Save Current Session"),
 					       GTK_WINDOW (dialog),
 					       GTK_FILE_CHOOSER_ACTION_SAVE,
@@ -2518,6 +2570,41 @@
 	burner_burn_dialog_cancel (dialog, FALSE);
 }
 
+#ifdef HAVE_APP_INDICATOR
+static void
+burner_burn_dialog_indicator_cancel_cb (BurnerAppIndicator *indicator,
+					 BurnerBurnDialog *dialog)
+{
+	burner_burn_dialog_cancel (dialog, FALSE);
+}
+
+static void
+burner_burn_dialog_indicator_show_dialog_cb (BurnerAppIndicator *indicator,
+					      gboolean show,
+					      GtkWidget *dialog)
+{
+	BurnerBurnDialogPrivate *priv;
+
+	priv = BURNER_BURN_DIALOG_PRIVATE (dialog);
+
+	/* we prevent to show the burn dialog once the success dialog has been
+	 * shown to avoid the following strange behavior:
+	 * Steps:
+	 * - start burning
+	 * - move to another workspace (ie, virtual desktop)
+	 * - when the burning finishes, double-click the notification icon
+	 * - you'll be unable to dismiss the dialogues normally and their behaviour will
+	 *   be generally strange */
+	if (!priv->burn)
+		return;
+
+	if (show)
+		gtk_widget_show (dialog);
+	else
+		gtk_widget_hide (dialog);
+}
+#endif
+
 static void
 burner_burn_dialog_init (BurnerBurnDialog * obj)
 {
@@ -2530,6 +2617,18 @@
 
 	gtk_window_set_default_size (GTK_WINDOW (obj), 500, 0);
 
+#ifdef HAVE_APP_INDICATOR
+	priv->indicator = burner_app_indicator_new ();
+	g_signal_connect (priv->indicator,
+			  "cancel",
+			  G_CALLBACK (burner_burn_dialog_indicator_cancel_cb),
+			  obj);
+	g_signal_connect (priv->indicator,
+			  "show-dialog",
+			  G_CALLBACK (burner_burn_dialog_indicator_show_dialog_cb),
+			  obj);
+#endif
+
 	alignment = gtk_alignment_new (0.5, 0.5, 1.0, 1.0);
 	gtk_widget_show (alignment);
 	gtk_alignment_set_padding (GTK_ALIGNMENT (alignment), 6, 8, 6, 6);
@@ -2605,6 +2704,13 @@
 		priv->burn = NULL;
 	}
 
+#ifdef HAVE_APP_INDICATOR
+	if (priv->indicator) {
+		g_object_unref (priv->indicator);
+		priv->indicator = NULL;
+	}
+#endif
+
 	if (priv->session) {
 		g_object_unref (priv->session);
 		priv->session = NULL;
Index: b/po/POTFILES.in
===================================================================
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -4,6 +4,7 @@
 data/burner.desktop.in.in
 data/mime/burner.xml.in
 data/org.gnome.burner.gschema.xml
+libburner-burn/burner-app-indicator.c
 libburner-burn/burner-blank-dialog.c
 libburner-burn/burner-burn.c
 libburner-burn/burner-burn-dialog.c
